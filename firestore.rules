rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is canvas owner or collaborator
    function isCanvasAuthorized(canvasId) {
      let canvasDoc = get(/databases/$(database)/documents/canvases/$(canvasId));
      return canvasDoc.data.ownerId == request.auth.uid 
        || request.auth.uid in canvasDoc.data.collaborators;
    }
    
    // Helper function that safely checks authorization (returns true if canvas doesn't exist yet)
    function canCreateOrIsAuthorized(canvasId) {
      let canvasDoc = get(/databases/$(database)/documents/canvases/$(canvasId));
      return !canvasDoc.__name__ || canvasDoc.data.ownerId == request.auth.uid 
        || request.auth.uid in canvasDoc.data.collaborators;
    }
    
    // Canvases metadata collection
    match /canvases/{canvasId} {
      // Read: any authenticated user can read canvas metadata (needed for joining via share code)
      // The actual canvas data (shapes) are protected separately in the /canvas collection
      allow read: if request.auth != null;
      
      // Create: user creating must be the owner
      allow create: if request.auth != null 
        && request.resource.data.ownerId == request.auth.uid;
      
      // Update: owner can update, or anyone can add themselves to collaborators via join
      allow update: if request.auth != null 
        && (resource.data.ownerId == request.auth.uid
            || (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['collaborators', 'lastAccessedBy', 'updatedAt'])
                && request.auth.uid in request.resource.data.collaborators
                && !(request.auth.uid in resource.data.collaborators)));
      
      // Delete: only owner can delete
      allow delete: if request.auth != null 
        && resource.data.ownerId == request.auth.uid;
    }
    
    // Canvas shapes data collection
    match /canvas/{canvasId} {
      // Create: allow if authenticated (canvas metadata will be created in same batch)
      allow create: if request.auth != null;
      
      // Read/Update/Delete: owner or collaborator
      allow read, update, delete: if request.auth != null && isCanvasAuthorized(canvasId);
    }
    
    // User canvases index (for fast dashboard loading)
    match /userCanvases/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Share codes collection
    match /shareCodes/{shareCode} {
      // Anyone authenticated can read (to join canvas)
      allow read: if request.auth != null;
      // Only backend/owners can write (through canvas management)
      allow write: if request.auth != null;
    }
    
    // Chat History - users can only access their own chat history
    match /chatHistory/{userId}/messages/{messageId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Comments - authenticated users who have access to the canvas
    match /comments/{commentId} {
      // Read: authorized to canvas
      allow read: if request.auth != null 
        && isCanvasAuthorized(resource.data.canvasId);
      
      // Create: is author and canvas exists or will be created
      allow create: if request.auth != null 
        && request.resource.data.authorId == request.auth.uid
        && canCreateOrIsAuthorized(request.resource.data.canvasId);
      
      // Update: author or just resolving
      allow update: if request.auth != null 
        && isCanvasAuthorized(resource.data.canvasId)
        && (resource.data.authorId == request.auth.uid 
            || (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['text', 'authorId', 'shapeId', 'position', 'canvasId', 'parentId', 'threadId'])));
      
      // Delete: author only
      allow delete: if request.auth != null 
        && resource.data.authorId == request.auth.uid
        && isCanvasAuthorized(resource.data.canvasId);
    }
    
    // AI Tasks - users can only read, create, update, and delete their own AI tasks on canvases they have access to
    match /ai_tasks/{taskId} {
      // Get: belongs to user and authorized to canvas
      allow get: if request.auth != null 
        && resource.data.authorId == request.auth.uid
        && isCanvasAuthorized(resource.data.canvasId);
      
      // List: authenticated (Firestore will filter by authorId in query)
      allow list: if request.auth != null;
      
      // Create: user's own task, canvas exists or will be created
      allow create: if request.auth != null 
        && request.resource.data.authorId == request.auth.uid
        && canCreateOrIsAuthorized(request.resource.data.canvasId);
      
      // Update: own task on authorized canvas
      allow update: if request.auth != null 
        && resource.data.authorId == request.auth.uid
        && isCanvasAuthorized(resource.data.canvasId);
      
      // Delete: own task on authorized canvas
      allow delete: if request.auth != null 
        && resource.data.authorId == request.auth.uid
        && isCanvasAuthorized(resource.data.canvasId);
    }
  }
}

